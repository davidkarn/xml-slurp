; creates a curl object that can store arguments to be passed to the command-line curl, keep track 
; of referers, and be used for scraping/crawiling web sites.

(define (curl)
  (let* ((cookie-jar #f)
	 (header-dump #f)
	 (trace-file #f)
	 (options '((cookie-jar . #f)
		    (cookie . #f)
		    (insecure . #t)
		    (user-agent . "2~Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17")
		    (no-keepalive . #t)
		    (follow-location . #t)))
	 (referer #f)
	 (response #f)
	 (response-process #f)
	 (request #f)
	 (this #f)
	 (curl-options
	  `((cookie-jar "-c")
	    (cookie "--cookie")
	    (insecure "-k")
	    (user-agent "-A")
	    (post-data "-d" )
	    (trace "--trace")
	    (referer "-e")
	    (data-urlencode "--data-urlencode")
	    (dump-header "--dump-header")
	    (header "-H")
	    (interface "-i")
	    (max-time "-m")
	    (no-keepalive "--no-keepalive")
	    (url "--url")
	    (follow-location "-L")))
	 (options-lis (lambda (alis)
			(reduce append '()
				(map (lambda (r) 
				       (if (not (cdr r))
					   '() 
					   (if (equal? #t (cdr r))
					       (cdr (assoc (car r) curl-options))
					       (list (second (assoc (car r) 
                                                                    curl-options)) 
                                                     (cdr r)))))
				     alis))))
	 (execute (lambda ()
		    (set! referer (cdr (assoc 'url request)))
		    (call-with-values 
			(lambda ()
                          (process (arglist->cmdline
                                    (append (list "curl")
                                            (options-lis request)
                                            (options-lis options)))))
		      (lambda (in out id)
			(set! response-process id)
			(set! response in)))
		    this))
	 (response-html (lambda ()
			  (if response-process
			      (begin
				(set! response (read-all response))
				(set! response-process #f)
				response)
			      response)))
	 (response-parsed (lambda ()
			    (if response-process
				(begin ;(process-wait response-process)
				  (set! response (parse-xml (list "" response)))
				  (set! response-process #f)
				  response)
				response))))
    (set! this
	  (lambda (cmd . args)
	    (cond ((equal? cmd 'set)
		   (set! options (cons (cons (car args) (cadr args)) options)))
		  ((equal? cmd 'update)
		   (set! options (alist-update options (car args) (cadr args))))
		  ((equal? cmd 'get)
		   (begin (set! request (list (cons 'url (car args))
                                              (cons 'referer referer)))
			  (execute)))
		  ((equal? cmd 'post)
		   (begin
                     (set! request 
                           (append 
                            (if (string? (cadr args))
                                (list (cons 'post-data (cadr args)))
                                (map (lambda (r) 
                                       (cons 'data-urlencode
                                             (s+ (->string (car r)) "="
                                                 (->string (if (list? r)
                                                               (second r)
                                                               (cdr r))))))
                                     (cadr args)))
                            (list (cons 'url (car args)) 
                                  (cons 'referer referer))))
                     (execute)))
		  ((equal? cmd 'store-cookies)
		   (let ((cj (if (not (empty? args)) 
                                 (car args)
                                 (create-temporary-file))))
		     (set! options (alist-update options 'cookie-jar cj))
		     (set! options (alist-update options 'cookie cj))
		     (set! cookie-jar cj)
		     cj))
		  ((equal? cmd 'catch-headers)
		   (let ((hf (if (not (empty? args))
                                 (car args) 
                                 (create-temporary-file))))
		     (set! options (alist-update options 'dump-header hf))
		     (set! header-dump hf)
		     hf))
		  ((equal? cmd 'trace)
		   (let ((tf (if (not (empty? args)) 
                                 (car args) 
                                 (create-temporary-file))))
		     (set! options (alist-update options 'trace tf))
		     (set! trace-file tf)
		     tf))
		  ((equal? cmd 'scrape)
		   (let ((parsed ((this 'get (car args)) 'parsed)))
		     (xml:slurp  parsed (second args))))
		  ((equal? cmd 'response-headers)
		   (read-all header-dump))
		  ((equal? cmd 'response)
		   (response-html))
		  ((equal? cmd 'parsed)
		   (response-parsed)))))
    this))


